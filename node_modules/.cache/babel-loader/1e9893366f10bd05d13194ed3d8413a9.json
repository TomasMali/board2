{"remainingRequest":"/Users/tomas/Desktop/board/node_modules/babel-loader/lib/index.js!/Users/tomas/Desktop/board/node_modules/eslint-loader/index.js??ref--13-0!/Users/tomas/Desktop/board/src/store/workitem/actions.js","dependencies":[{"path":"/Users/tomas/Desktop/board/src/store/workitem/actions.js","mtime":1630952636137},{"path":"/Users/tomas/Desktop/board/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomas/Desktop/board/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tomas/Desktop/board/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tomas/Desktop/board/src/store/workitem/actions.js"],"names":["updateWorkitem","_","payload","url","fetch","method","cache","credentials","headers","redirect","referrerPolicy","enctype","body","JSON","stringify","workitem","response","json","responseData","ok","code","Error","message","status","getWorkitems","context","sprint","commit","fidsCompetitionObj","insertWorkitem","deleteWorkitem","id"],"mappings":"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","sourcesContent":["export default {\r\n    async updateWorkitem(_, payload) {\r\n        let url = \"\";\r\n        //   console.log(payload);\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                workitem: payload,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\r\n                    \"Request failed with error code: \" +\r\n                    response.status +\r\n                    \" Message error from server: \" +\r\n                    responseData.message\r\n                );\r\n        }\r\n    },\r\n\r\n    async getWorkitems(context, payload) {\r\n        let url = \"\" + \"?sprint=\" + payload.sprint;\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n        //  console.log(responseData)\r\n        context.commit(\"setFidsCompetitions\", {\r\n            fidsCompetitionObj: responseData,\r\n        });\r\n    },\r\n\r\n    async insertWorkitem(_, payload) {\r\n        let url = \"\";\r\n\r\n        //  console.log(payload)\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                workitem: payload,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Work in progress..... Please submit all the fields \");\r\n        }\r\n    },\r\n\r\n    async deleteWorkitem(_, payload) {\r\n        let url = \"\";\r\n        //  console.log(payload)\r\n\r\n        const response = await fetch(url, {\r\n            method: \"DELETE\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                id: payload.id,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n    },\r\n};"]}]}