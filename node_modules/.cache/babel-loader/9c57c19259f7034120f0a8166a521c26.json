{"remainingRequest":"/Users/tomas/Desktop/board/node_modules/thread-loader/dist/cjs.js!/Users/tomas/Desktop/board/node_modules/babel-loader/lib/index.js!/Users/tomas/Desktop/board/node_modules/eslint-loader/index.js??ref--13-0!/Users/tomas/Desktop/board/src/store/workitem/actions.js","dependencies":[{"path":"/Users/tomas/Desktop/board/src/store/workitem/actions.js","mtime":1631134276516},{"path":"/Users/tomas/Desktop/board/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomas/Desktop/board/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomas/Desktop/board/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tomas/Desktop/board/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tomas/Desktop/board/src/store/workitem/actions.js"],"names":["cred","updateWorkitem","_","payload","url","getLinkType","url_workitem_update","fetch","method","cache","credentials","headers","redirect","referrerPolicy","enctype","body","JSON","stringify","workitem","response","json","responseData","ok","code","Error","message","status","getSprints","context","url_sprint_get","commit","sprintsObj","insertSprint","url_sprint_insert","sprint","getWorkitems","url_workitem_get","workitemsObj","insertWorkitem","url_wrkitem_insert","deleteWorkitem","url_workitem_delete","id"],"mappings":"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","sourcesContent":["import cred from \"../cred.js\";\r\n\r\nexport default {\r\n    async updateWorkitem(_, payload) {\r\n        let url = cred.getLinkType().url_workitem_update;\r\n        // let url = \"http://localhost:3100/workitem/update\";\r\n        //   console.log(payload);\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                workitem: payload,\r\n            }),\r\n        });\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\r\n                    \"Request failed with error code: \" +\r\n                    response.status +\r\n                    \" Message error from server: \" +\r\n                    responseData.message\r\n                );\r\n        }\r\n    },\r\n\r\n    async getSprints(context) {\r\n        let url = cred.getLinkType().url_sprint_get;\r\n\r\n        // let url = \"http://localhost:3100/workitem/getSprints\";\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n        //  console.log(responseData)\r\n        context.commit(\"setSprints\", {\r\n            sprintsObj: responseData,\r\n        });\r\n    },\r\n\r\n    async insertSprint(_, payload) {\r\n        //  let url = \"http://localhost:3100/workitem/insertSprint\";\r\n        let url = cred.getLinkType().url_sprint_insert;\r\n\r\n        //  console.log(payload)\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                sprint: payload,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Work in progress..... Please submit all the fields \");\r\n        }\r\n    },\r\n\r\n    async getWorkitems(context, payload) {\r\n        let url = cred.getLinkType().url_workitem_get + \"?sprint=\" + payload.sprint;\r\n\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n        //  console.log(responseData)\r\n        context.commit(\"setWorkitems\", {\r\n            workitemsObj: responseData,\r\n        });\r\n    },\r\n\r\n    async insertWorkitem(_, payload) {\r\n        let url = cred.getLinkType().url_wrkitem_insert;\r\n\r\n        //   let url = \"http://localhost:3100/workitem/insertWorkitem\";\r\n\r\n        //  console.log(payload)\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                workitem: payload,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Work in progress..... Please submit all the fields \");\r\n        }\r\n    },\r\n\r\n    async deleteWorkitem(_, payload) {\r\n        let url = cred.getLinkType().url_workitem_delete;\r\n\r\n        //   let url = \"http://localhost:3100/workitem/deleteWorkitem\";\r\n        //  console.log(payload)\r\n\r\n        const response = await fetch(url, {\r\n            method: \"DELETE\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                id: payload.id,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n    },\r\n};"]}]}