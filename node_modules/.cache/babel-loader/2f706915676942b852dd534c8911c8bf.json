{"remainingRequest":"/Users/tomas/Desktop/board2/node_modules/babel-loader/lib/index.js!/Users/tomas/Desktop/board2/node_modules/eslint-loader/index.js??ref--13-0!/Users/tomas/Desktop/board2/src/store/todo/actions.js","dependencies":[{"path":"/Users/tomas/Desktop/board2/src/store/todo/actions.js","mtime":1631524536209},{"path":"/Users/tomas/Desktop/board2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomas/Desktop/board2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tomas/Desktop/board2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tomas/Desktop/board2/src/store/todo/actions.js"],"names":["cred","getTodos_Action","context","payload","url","getLinkType","url_todo_get","workitem","fetch","method","cache","credentials","headers","redirect","referrerPolicy","enctype","response","json","responseData","ok","code","Error","message","status","commit","todosObj","updateTodos_Action","_","url_todo_update","body","JSON","stringify","todo","insertTodos_Action","url_todo_insert","deleteTodos_Action","url_todo_delete","id"],"mappings":"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","sourcesContent":["import cred from \"../cred.js\";\r\n\r\nexport default {\r\n    async getTodos_Action(context, payload) {\r\n        let url = cred.getLinkType().url_todo_get + \"?workitem=\" + payload.workitem;\r\n\r\n        const response = await fetch(url, {\r\n            method: \"GET\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n        //  console.log(responseData)\r\n        context.commit(\"setTodos\", {\r\n            todosObj: responseData,\r\n        });\r\n    },\r\n\r\n    async updateTodos_Action(_, payload) {\r\n        let url = cred.getLinkType().url_todo_update;\r\n        //   console.log(payload);\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                todo: payload,\r\n            }),\r\n        });\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\r\n                    \"Request failed with error code: \" +\r\n                    response.status +\r\n                    \" Message error from server: \" +\r\n                    responseData.message\r\n                );\r\n        }\r\n    },\r\n\r\n    async insertTodos_Action(_, payload) {\r\n        let url = cred.getLinkType().url_todo_insert;\r\n        //  console.log(payload)\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                todo: payload,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Work in progress..... Please submit all the fields \");\r\n        }\r\n    },\r\n\r\n    async deleteTodos_Action(_, payload) {\r\n        let url = cred.getLinkType().url_todo_delete;\r\n        //  console.log(payload)\r\n        const response = await fetch(url, {\r\n            method: \"DELETE\",\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            redirect: \"follow\",\r\n            referrerPolicy: \"no-referrer\",\r\n            enctype: \"mutipart/form-data\",\r\n            body: JSON.stringify({\r\n                id: payload.id,\r\n            }),\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        if (!response.ok) {\r\n            if (responseData.code === 409) {\r\n                throw new Error(responseData.message);\r\n            } else\r\n                throw new Error(\"Request failed with error code: \" + response.status);\r\n        }\r\n    },\r\n};"]}]}